{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "utils.json",
	"title": "Utility Schema Functions",
	"description": "A file containing various utility functions for Pf2eTools.",
	"type": "object",
	"version": "0.0.1",
	"definitions": {
		"sourceList": {
			"enum": [
				"AAWS",
				"APG",
				"AV0",
				"AV1",
				"AV2",
				"AV3",
				"AoA0",
				"AoA1",
				"AoA2",
				"AoA3",
				"AoA4",
				"AoA5",
				"AoA6",
				"AoE0",
				"AoE1",
				"AoE2",
				"AoE3",
				"AoE4",
				"AoE5",
				"AoE6",
				"Bst",
				"Bst2",
				"Bst3",
				"CRB",
				"EC0",
				"EC1",
				"EC2",
				"EC3",
				"EC4",
				"EC5",
				"EC6",
				"FRP0",
				"FRP1",
				"FRP2",
				"FRP3",
				"FoP",
				"G&G",
				"GMG",
				"LOACLO",
				"LOAG",
				"LOCG",
				"LOGM",
				"LOGMWS",
				"LOL",
				"LOME",
				"LOPSG",
				"LOTGB",
				"LOWG",
				"LTiBA",
				"NGD",
				"Sli",
				"SoM",
				"SoT0",
				"SoT1",
				"SoT2",
				"SoT3",
				"SoT4",
				"SoT5",
				"SoT6",
				"TiO"
			]
		},
		"alignmentTraits": {
			"type": "string",
			"anyOf": [
				{
					"$ref": "#/definitions/alignmentNames"
				},
				{
					"$ref": "#/definitions/alignmentTags"
				}
			]
		},
		"alignmentNames": {
			"type": "string",
			"description": "L: Lawful\n N: Neutral\n NX: Neutral (law/chaos axis)\n NY: Neutral (good/evil axis)\n C: Chaotic\n G: Good\n E: Evil\n U: Unaligned\n A: Any",
			"enum": [
				"any",
				"lawful",
				"chaotic",
				"good",
				"evil",
				"neutral",
				"all"
			]
		},
		"alignmentTags": {
			"type": "string",
			"description": "CE: Chaotic Evil\nCG: Chaotic Good\nCN: Chaotic Neutral\nLE: Lawful Evil\nLG: Lawful Good\nLN: Lawful Neutral\nN: Neutral\nNE: Neutral Evil\nNG: Neutral Good",
			"enum": [
				"ce",
				"cg",
				"cn",
				"le",
				"lg",
				"ln",
				"n",
				"ne",
				"ng"
			]
		},


		"speed": {
			"type": "object",
			"patternProperties": {
				"^(walk|climb|fly|burrow|swim)$": {
					"type": "integer",
					"exclusiveMinimum": 0
				}
			},
			"properties": {
				"speedNote": {
					"type": "string"
				}
			},
			"additionalProperties": {
				"type": "integer",
				"exclusiveMinimum": 0
			}
		},


		"frequency": {
			"type": "object",
			"oneOf": [
				{
					"properties": {
						"special": {
							"$comment": "For special cases that require a custom string.",
							"type": "string"
						}
					},
					"additionalProperties": false,
					"required": ["special"]
				},
				{
					"properties": {
						"freq": {
							"$comment": "In code return \"Once\" if =1, \"Twice\" if =2, and \"`n` times\" otherwise.",
							"description": "How frequent it is; once, twice etc.",
							"type": "integer",
							"default": 1,
							"exclusiveMinimum": 0
						},
						"recurs": {
							"$comment": "Assume false unless provided. If provided, render \"every\" instead of \"per\".",
							"description": "Use \"every\" instead of \"per\".",
							"type": "boolean",
							"default": false
						},
						"overcharge": {
							"$comment": "Assume false unless provided. If provided, render \", plus overcharge\".",
							"description": "Adds \", plus overcharge\"; used for Wands.",
							"type": "boolean",
							"default": false
						},
						"interval": {
							"$comment": "Assume =1 unless provided.",
							"description": "The number of units e.g. every *three* hours.",
							"type": "integer",
							"default": 1,
							"exclusiveMinimum": 0
						},
						"unit": {
							"$comment": "If \"interval\" is provided and > 1, then return the plural form of the unit.",
							"type": "string",
							"enum": [
								"turn",
								"round",
								"minute",
								"hour",
								"day",
								"week",
								"month",
								"year"
							]
						},
						"customUnit": {
							"description": "Name of a custom unit, use the correct single/plural form.",
							"type": "string",
							"examples": ["epoch", "gem"]
						}
					},
					"additionalProperties": false,
					"oneOf": [
						{
							"required": ["freq", "unit"]
						},
						{
							"required": ["freq", "customUnit"]
						}
					]
				}
			]
		},
		"activity": {
			"type": "object",
			"required": ["number", "unit"],
			"properties": {
				"number": {
					"type": "integer"
				},
				"unit": {
					"type": "string",
					"enum": [
						"free",
						"reaction",
						"action",
						"round",
						"minute",
						"hour",
						"varies"
					]
				},
				"entry": {
					"type": "string",
					"not": {
						"pattern": "^{@as [123RFrf]}$"
					}
				}
			},
			"additionalProperties": false
		},
		"price": {
			"type": "object",
			"properties": {
				"coin": {
					"type": "string",
					"enum": ["gp", "sp", "cp", "pp"]
				},
				"amount": {
					"type": "number"
				}
			},
			"required": ["amount", "coin"]
		},
		"otherSources": {
			"type": "object",
			"patternProperties": {
				"^(Reprinted|Expanded)$": {
					"type": "array",
					"items": {
						"type": "string",
						"pattern": "^[\\w\\d&]+\\|\\d+$"
					},
					"uniqueItems": true
				}
			},
			"additionalProperties": false
		},
		"skillBonus": {
			"$comment": "Just keeping this around in case we want it later, currently unused",
			"type": "object",
			"propertyNames": {
				"$ref": "#/definitions/skillName"
			},
			"additionalProperties": {
				"type": "string",
				"pattern": "^(\\+|-)\\d$"
			}
		},
		"implies": {
			"type": "object",
			"properties": {
				"item": {
					"type": "object",
					"properties": {
						"_fDamageType": {
							"type": "object",
							"properties": {
								"regex": {
									"type": "string",
									"format": "regex"
								},
								"flags": {
									"type": "string",
									"pattern": "^[gmixsuXUAJ]*$"
								},
								"value": {
									"type": "string"
								}
							},
							"minProperties": 3,
							"additionalProperties": false
						}
					}
				},
				"creature": {
					"type": "object",
					"properties": {
						"_fimmunities": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": [
									"emotion",
									"fear",
									"possession",
									"mental"
								]
							},
							"uniqueItems": true
						},
						"additionalProperties": false
					}
				}
			},
			"additionalProperties": false
		},
		"anyTrait": {
			"type": "string",
			"description": "Any Trait in the game.",
			"anyOf": [
				{
					"$ref": "#/definitions/rarity"
				},
				{
					"$ref": "#/definitions/className"
				},
				{
					"$ref": "#/definitions/school"
				},
				{
					"$ref": "#/definitions/tradition"
				},
				{
					"$ref": "#/definitions/damageType"
				},
				{
					"$ref": "#/definitions/effectName"
				},
				{
					"$ref": "#/definitions/ancestryName"
				},
				{
					"$ref": "#/definitions/alignmentTraits"
				},
				{
					"enum": [
						"archetype",
						"secret",
						"dedication",
						"general",
						"skill",
						"prestige",
						"attack",
						"move",
						"exploration",
						"downtime",
						"energy",
						"concentrate",
						"finisher",
						"manipulate",
						"auditory",
						"flourish",
						"tandem",
						"stance",
						"spellshot",
						"unstable",
						"reckless",
						"verbal",
						"open",
						"rage",
						"lineage",
						"metamagic",
						"press",
						"oath",
						"vigilante",
						"multiclass",
						"social",
						"air",
						"earth",
						"water",
						"magical",
						"aura",
						"modification",
						"class",
						"extradimensional",
						"evolution",
						"pervasive magic",
						"eidolon",
						"true name",
						"shadow",
						"contract",
						"invested",
						"curse",
						"virulent",
						"nonlethal",
						"darkness",
						"plant",
						"fungus",
						"olfactory",
						"inhaled",
						"incarnate",
						"shove",
						"alchemical",
						"death",
						"light",
						"emotion",
						"fear",
						"charm",
						"summoned",
						"summon",
						"clockwork",
						"kaiju",
						"steam"
					]
				},
				{
					"enum": ["[magical tradition]", "[class]"]
				},
				{
					"type": "string",
					"pattern": "Additive \\d"
				},
				{
					"type": "string",
					"pattern": "^reach \\d+ feet$"
				},
				{
					"type": "string",
					"pattern": "^deadly \\d*d\\d+$"
				},
				{
					"type": "string",
					"pattern": "^range \\d+ feet$"
				}
			]
		},
		"loreSubjects": {
			"type": "string",
			"enum": [
				"dragon",
				"kintargo",
				"dahak",
				"architecture",
				"breachill"
			]
		},
		"ability": {
			"type": "string",
			"enum": [
				"strength",
				"dexterity",
				"constitution",
				"intelligence",
				"wisdom",
				"charisma",
				"free"
			]
		},
		"abilityAbbv": {
			"type": "string",
			"enum": [
				"str",
				"dex",
				"con",
				"int",
				"wis",
				"cha"
			]
		},
		"ancestryName": {
			"type": "string",
			"enum": [
				"kitsune",
				"kobold",
				"grippli",
				"aasimar",
				"changeling",
				"human",
				"catfolk",
				"elf",
				"orc",
				"ratfolk",
				"dhampir",
				"duskwalker",
				"gnome",
				"goblin",
				"tiefling",
				"halfling",
				"dwarf",
				"half-elf",
				"half-orc",
				"tengu",
				"automaton",
				"hobgoblin",
				"poppet",
				"goloma",
				"anadi",
				"gnoll",
				"lizardfolk",
				"conrasu",
				"shisk"
			]
		},
		"skillName": {
			"type": "string",
			"description": "A Skill Trait",
			"enum": [
				"acrobatics",
				"arcana",
				"athletics",
				"crafting",
				"deception",
				"diplomacy",
				"intimidation",
				"lore",
				"medicine",
				"nature",
				"occultism",
				"performance",
				"religion",
				"society",
				"stealth",
				"survival",
				"thievery"
			]
		},
		"classNameSourced": {
			"type": "string",
			"enum": [
				"alchemist",
				"barbarian",
				"bard",
				"champion",
				"cleric",
				"druid",
				"fighter",
				"gunslinger|G&G",
				"inventor|G&G",
				"investigator|APG",
				"magus|SoM",
				"monk",
				"oracle|APG",
				"ranger",
				"rogue",
				"sorcerer",
				"summoner|SoM",
				"swashbuckler|APG",
				"witch|APG",
				"wizard"
			]
		},
		"className": {
			"type": "string",
			"enum": [
				"alchemist",
				"barbarian",
				"bard",
				"champion",
				"cleric",
				"druid",
				"fighter",
				"gunslinger",
				"inventor",
				"investigator",
				"magus",
				"monk",
				"oracle",
				"ranger",
				"rogue",
				"sorcerer",
				"summoner",
				"swashbuckler",
				"witch",
				"wizard"
			]
		},
		"rarity": {
			"type": "string",
			"enum": ["common", "uncommon", "rare", "unique"]
		},
		"tradition": {
			"type": "string",
			"enum": ["arcane", "divine", "occult", "primal"]
		},
		"school": {
			"type": "string",
			"enum": [
				"abjuration",
				"conjuration",
				"divination",
				"enchantment",
				"evocation",
				"illusion",
				"necromancy",
				"transmutation"
			]
		},

		"damage": {
			"$comment": "Draft Damage object style",
			"type": "object",
			"propertyNames": {
				"$ref": "#/definitions/damageType"
			},
			"additionalProperties": {
				"oneOf": [
					{
						"type": "boolean",
						"enum": [true]
					},
					{
						"type": "object",
						"properties": {
							"versatile": {
								"type": "boolean",
								"enum": [true]
							},
							"persistent": {
								"type": "boolean",
								"enum": [true]
							}
						},
						"additionalProperties": false
					}
				]
			}
		},

		"damageType": {
			"type": "string",
			"enum": [
				"electricity",
				"sonic",
				"acid",
				"poison",
				"cold",
				"fire",
				"slashing",
				"bludgeoning",
				"piercing",
				"positive",
				"negative",
				"force",
				"bleed",
				"precision",
				"evil",
				"good",
				"chaotic",
				"lawful",
				"mental",

				"persistent"
			]
		},
		"damageTypeTags": {
			"type": "string",
			"description": "TODO"
		},
		"effectName": {
			"type": "string",
			"enum": [
				"death",
				"detection",
				"disease",
				"emotion",
				"fear",
				"fortune",
				"healing",
				"incapacitation",
				"light",
				"linguistic",
				"misfortune",
				"morph",
				"polymorph",
				"possession",
				"prediction",
				"revelation",
				"scrying",
				"sleep",
				"teleportation",
				"visual"
			]
		},
		"weaponGroup": {
			"type": "string",
			"enum": [
				"Firearm|G&G",
				"Axe",
				"Sword",
				"Spear",
				"Sling",
				"Shield",
				"Polearm",
				"Pick",
				"Knife",
				"Hammer",
				"Flail",
				"Dart",
				"Club",
				"Brawling",
				"Bow"
			]
		},
		"armorGroup": {
			"type": "string",
			"enum": ["Plate", "Leather", "Chain", "Cloth", "Composite"]
		},
		"conditions": {
			"type": "string",
			"enum": [
				"blinded",
				"broken",
				"clumsy",
				"concealed",
				"confused",
				"controlled",
				"dazzled",
				"deafened",
				"doomed",
				"drained",
				"dying",
				"encumbered",
				"enfeebled",
				"fascinated",
				"fatigued",
				"flat-footed",
				"fleeing",
				"friendly",
				"frightened",
				"grabbed",
				"helpful",
				"hidden",
				"hostile",
				"immobilized",
				"indifferent",
				"invisible",
				"observed",
				"paralyzed",
				"persistent damage",
				"petrified",
				"prone",
				"quickened",
				"restrained",
				"sickened",
				"slowed",
				"stunned",
				"stupefied",
				"unconscious",
				"undetected",
				"unfriendly",
				"unnoticed",
				"wounded"
			]
		},
		"domains": {
			"type": "string",
			"enum": [
				"air",
				"ambition",
				"change",
				"cities",
				"cold",
				"confidence",
				"creation",
				"darkness",
				"death",
				"decay",
				"delirium",
				"destruction",
				"dreams",
				"dust",
				"duty",
				"earth",
				"family",
				"fate",
				"fire",
				"freedom",
				"glyph",
				"healing",
				"indulgence",
				"knowledge",
				"lightning",
				"luck",
				"magic",
				"might",
				"moon",
				"naga",
				"nature",
				"nightmares",
				"pain",
				"passion",
				"perfection",
				"plague",
				"protection",
				"repose",
				"secrecy",
				"sorrow",
				"souls",
				"stars",
				"sun",
				"swarm",
				"time",
				"toil",
				"travel",
				"trickery",
				"truth",
				"tyranny",
				"undeath",
				"vigil",
				"void",
				"water",
				"wealth",
				"wyrmkin",
				"zeal"
			]
		},
		"genericFluffArray": {
			"type": "array",
			"uniqueItems": true,
			"items": {
				"anyOf": [
					{
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"page": {
								"type": "integer"
							},
							"source": {
								"type": "string"
							},
							"otherSources": {
								"$ref": "#/definitions/otherSources"
							},
							"images": {
								"oneOf": [
									{
										"type": "array",
										"items": {
											"$ref": "entry.json#/definitions/entryImage"
										}
									},
									{
										"type": "null"
									}
								]
							},
							"lore": {
								"type": "array",
								"items": {
									"$ref": "entry.json"
								}
							},
							"entries": {
								"type": "array",
								"items": {
									"$ref": "entry.json"
								}
							},
							"_copy": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"pantheon": {
										"description": "Used in deity data",
										"type": "string"
									},
									"shortName": {
										"description": "Used in subclass data",
										"type": "string"
									},
									"className": {
										"description": "Used in subclass data",
										"type": "string"
									},
									"classSource": {
										"description": "Used in subclass data",
										"type": "string"
									},
									"_mod": {
										"$ref": "#/definitions/_modObject"
									},
									"_trait": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"source": {
												"type": "string"
											}
										},
										"required": [
											"name",
											"source"
										]
									},
									"_preserve": {
										"type": "object",
										"patternProperties": {
											".*": {
												"type": "boolean"
											}
										}
									}
								},
								"required": [
									"name",
									"source"
								],
								"additionalProperties": false
							}
						},
						"additionalProperties": false,
						"required": [
							"name",
							"source"
						]
					},
					{
						"type": "object",
						"$comment": "This is a custom pre-processor tag, which merges together the array of objects into one. This allows proper inheritance, which JSON schema don't really do.",
						"properties": {
							"name": {
								"type": "string"
							},
							"page": {
								"type": "integer"
							},
							"source": {
								"type": "string"
							},
							"otherSources": {
								"$ref": "#/definitions/otherSources"
							},
							"images": {
								"oneOf": [
									{
										"type": "array",
										"items": {
											"$ref": "entry.json#/definitions/entryImage"
										}
									},
									{
										"type": "null"
									}
								]
							},
							"lore": {
								"type": "array",
								"items": {
									"$ref": "entry.json"
								}
							},
							"entries": {
								"type": "array",
								"items": {
									"$ref": "entry.json"
								}
							},
							"_copy": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"pantheon": {
										"description": "Used in deity data",
										"type": "string"
									},
									"shortName": {
										"description": "Used in subclass data",
										"type": "string"
									},
									"className": {
										"description": "Used in subclass data",
										"type": "string"
									},
									"classSource": {
										"description": "Used in subclass data",
										"type": "string"
									},
									"_mod": {
										"$ref": "#/definitions/_modObject"
									},
									"_trait": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"source": {
												"type": "string"
											}
										},
										"required": [
											"name",
											"source"
										]
									},
									"_preserve": {
										"type": "object",
										"patternProperties": {
											".*": {
												"type": "boolean"
											}
										}
									}
								},
								"required": [
									"name",
									"source"
								],
								"additionalProperties": false
							}
						},
						"additionalProperties": false,
						"required": [
							"_copy"
						]
					}
				]
			}
		},
		"_modObject": {
			"type": "object",
			"patternProperties": {
				".*": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"$ref": "#/definitions/copyModifier"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/copyModifier"
							}
						}
					]
				}
			}
		},
		"copyModifier": {
			"anyOf": [
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "replaceTxt"
						},
						"replace": {
							"type": "string"
						},
						"with": {
							"type": "string"
						},
						"flags": {
							"type": "string"
						},
						"props": {
							"description": "If unspecified, defaults to `[null, \"entries\", \"headerEntries\", \"footerEntries\"]`. To apply to _any_ string, including those outside of sub-properties (for instance, when trying to replace text in an array of plain strings), include `null` as one of the props (i.e. `\"props\": [null]`)",
							"type": "array",
							"items": {
								"type": [
									"string",
									"null"
								]
							}
						}
					},
					"required": [
						"replace",
						"with"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "replaceName"
						},
						"replace": {
							"type": "string"
						},
						"with": {
							"type": "string"
						},
						"flags": {
							"type": "string"
						}
					},
					"required": [
						"replace",
						"with"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "appendStr"
						},
						"str": {
							"type": "string"
						},
						"joiner": {
							"type": "string"
						}
					},
					"required": [
						"str"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "prependArr"
						},
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "object"
								},
								{
									"type": "array"
								}
							]
						}
					},
					"required": [
						"items"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "appendArr"
						},
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "object"
								},
								{
									"type": "array"
								}
							]
						}
					},
					"required": [
						"items"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "appendIfNotExistsArr"
						},
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "object"
								},
								{
									"type": "array"
								}
							]
						}
					},
					"required": [
						"items"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "replaceArr"
						},
						"replace": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"type": "object",
									"properties": {
										"index": {
											"type": "integer"
										}
									},
									"required": [
										"index"
									],
									"additionalProperties": false
								},
								{
									"type": "object",
									"properties": {
										"regex": {
											"type": "string"
										},
										"flags": {
											"type": "string"
										}
									},
									"required": [
										"regex"
									],
									"additionalProperties": false
								}
							]
						},
						"items": {
							"anyOf": [
								{
									"type": "object"
								},
								{
									"type": "array"
								}
							]
						}
					},
					"required": [
						"replace",
						"items"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "replaceOrAppendArr"
						},
						"replace": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"type": "object",
									"properties": {
										"index": {
											"type": "integer"
										}
									},
									"required": [
										"index"
									],
									"additionalProperties": false
								},
								{
									"type": "object",
									"properties": {
										"regex": {
											"type": "string"
										},
										"flags": {
											"type": "string"
										}
									},
									"required": [
										"regex"
									],
									"additionalProperties": false
								}
							]
						},
						"items": {
							"anyOf": [
								{
									"type": "object"
								},
								{
									"type": "array"
								}
							]
						}
					},
					"required": [
						"replace",
						"items"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "insertArr"
						},
						"index": {
							"type": "integer"
						},
						"items": {
							"anyOf": [
								{
									"type": "object"
								},
								{
									"type": "string"
								},
								{
									"type": "array"
								}
							]
						}
					},
					"required": [
						"index",
						"items"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "removeArr"
						},
						"names": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array"
								}
							]
						},
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array"
								}
							]
						},
						"force": {
							"type": "boolean"
						}
					},
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "calculateProp"
						},
						"prop": {
							"type": "string"
						},
						"formula": {
							"type": "string"
						}
					},
					"required": [
						"prop",
						"formula"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "replaceSpells"
						},
						"spells": {
							"type": "object"
						},
						"daily": {
							"type": "object"
						}
					},
					"required": [
						"mode"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "addSpells"
						},
						"spells": {
							"type": "object"
						},
						"will": {
							"type": "array"
						},
						"daily": {
							"type": "object"
						},
						"weekly": {
							"type": "object"
						},
						"yearly": {
							"type": "object"
						}
					},
					"required": [
						"mode"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "addSkills"
						},
						"skills": {
							"type": "object"
						}
					},
					"required": [
						"mode",
						"skills"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "addSaves"
						},
						"saves": {
							"type": "object"
						}
					},
					"required": [
						"mode",
						"saves"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "addAllSkills"
						},
						"skills": {
							"type": "integer"
						}
					},
					"required": [
						"mode",
						"skills"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "addAllSaves"
						},
						"saves": {
							"type": "integer"
						}
					},
					"required": [
						"mode",
						"saves"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "addSenses"
						},
						"senses": {
							"anyOf": [
								{
									"type": "object"
								},
								{
									"type": "array"
								}
							]
						}
					},
					"required": [
						"mode",
						"senses"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "scalarAddProp"
						},
						"prop": {
							"type": "string"
						},
						"scalar": {
							"type": "number"
						}
					},
					"required": [
						"mode",
						"scalar",
						"prop"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "scalarMultProp"
						},
						"prop": {
							"type": "string"
						},
						"scalar": {
							"type": "number"
						},
						"floor": {
							"type": "boolean"
						}
					},
					"required": [
						"mode",
						"scalar",
						"prop"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "scalarAddHit"
						},
						"scalar": {
							"type": "number"
						}
					},
					"required": [
						"mode",
						"scalar"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "scalarAddDc"
						},
						"scalar": {
							"type": "number"
						}
					},
					"required": [
						"mode",
						"scalar"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "maxSize"
						},
						"max": {
							"type": "string"
						}
					},
					"required": [
						"mode",
						"max"
					],
					"additionalProperties": false
				},
				{
					"type": "object",
					"properties": {
						"mode": {
							"const": "scalarMultXp"
						},
						"scalar": {
							"type": "number"
						},
						"floor": {
							"type": "boolean"
						}
					},
					"required": [
						"mode",
						"scalar"
					],
					"additionalProperties": false
				}
			]
		}
	}
}