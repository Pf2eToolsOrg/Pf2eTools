"use strict";class MultiSource{static onFilterChangeMulti(multiList){FilterBox.selectFirstVisible(multiList)}constructor(opts){opts=opts||{};this._fnHandleData=opts.fnHandleData;this._prop=opts.prop;this._loadedSources={}}get loadedSources(){return this._loadedSources}async pLoadSource(src,nextFilterVal){if(nextFilterVal!=="yes")return;const toLoad=this._loadedSources[src]||this._loadedSources[Object.keys(this._loadedSources).find((k=>k.toLowerCase()===src))];if(toLoad.loaded)return;const data=await DataUtil.loadJSON(toLoad.url);this._fnHandleData(data[this._prop]);toLoad.loaded=true}async pMultisourceLoad(jsonDir,filterBox,pPageInit,addFn,pOptional){const src2UrlMap=await DataUtil.loadJSON(`${jsonDir}index.json`);Object.keys(src2UrlMap).forEach((src=>this._loadedSources[src]={url:jsonDir+src2UrlMap[src],loaded:false}));const sources=Object.keys(src2UrlMap);const defaultSel=sources.filter((s=>PageFilter.defaultSourceSelFn(s)));const filterSel=await filterBox.pGetStoredActiveSources()||defaultSel;const listSel=await ListUtil.pGetSelectedSources()||[];const hashSourceRaw=Hist.getHashSource();const hashSource=hashSourceRaw?Object.keys(src2UrlMap).find((it=>it.toLowerCase()===hashSourceRaw.toLowerCase())):null;const userSel=[...new Set([...filterSel,...listSel,hashSource].filter(Boolean))];const allSources=[];if(userSel){userSel.filter((src=>src2UrlMap[src])).filter((src=>$.inArray(src,allSources)===-1)).forEach((src=>allSources.push(src)))}if(allSources.length===0){defaultSel.filter((src=>src2UrlMap[src])).forEach((src=>allSources.push(src)))}if(window.location.hash.length){const[link,...sub]=Hist.getHashParts();const src=link.split(HASH_LIST_SEP)[1];const hashSrcs={};sources.forEach((src=>hashSrcs[UrlUtil.encodeForHash(src)]=src));const mapped=hashSrcs[src];if(mapped&&!allSources.includes(mapped)){allSources.push(mapped)}}const toLoads=allSources.map((src=>({src:src,url:jsonDir+src2UrlMap[src]})));let list,subList;if(toLoads.length>0){const dataStack=(await Promise.all(toLoads.map((async toLoad=>{const data=await DataUtil.loadJSON(toLoad.url);this._loadedSources[toLoad.src].loaded=true;return data})))).flat();const pair=await pPageInit(this._loadedSources);list=pair.list;subList=pair.subList;let toAdd=[];dataStack.forEach((d=>toAdd=toAdd.concat(d[this._prop])));addFn(toAdd)}else{const pair=await pPageInit(this._loadedSources);list=pair.list;subList=pair.subList}if(pOptional)await pOptional();RollerUtil.addListRollButton();ListUtil.addListShowHide();list.init();subList.init();Hist.init(true)}}